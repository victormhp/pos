/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SalesIndexImport } from './routes/sales/index'
import { Route as OrdersIndexImport } from './routes/orders/index'
import { Route as MaterialsIndexImport } from './routes/materials/index'
import { Route as ClientsIndexImport } from './routes/clients/index'
import { Route as MaterialsAddRouteImport } from './routes/materials/add.route'
import { Route as MaterialsAddIndexImport } from './routes/materials/add.index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SalesIndexRoute = SalesIndexImport.update({
  id: '/sales/',
  path: '/sales/',
  getParentRoute: () => rootRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any)

const MaterialsIndexRoute = MaterialsIndexImport.update({
  id: '/materials/',
  path: '/materials/',
  getParentRoute: () => rootRoute,
} as any)

const ClientsIndexRoute = ClientsIndexImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => rootRoute,
} as any)

const MaterialsAddRouteRoute = MaterialsAddRouteImport.update({
  id: '/materials/add',
  path: '/materials/add',
  getParentRoute: () => rootRoute,
} as any)

const MaterialsAddIndexRoute = MaterialsAddIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MaterialsAddRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/materials/add': {
      id: '/materials/add'
      path: '/materials/add'
      fullPath: '/materials/add'
      preLoaderRoute: typeof MaterialsAddRouteImport
      parentRoute: typeof rootRoute
    }
    '/clients/': {
      id: '/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsIndexImport
      parentRoute: typeof rootRoute
    }
    '/materials/': {
      id: '/materials/'
      path: '/materials'
      fullPath: '/materials'
      preLoaderRoute: typeof MaterialsIndexImport
      parentRoute: typeof rootRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/sales/': {
      id: '/sales/'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof SalesIndexImport
      parentRoute: typeof rootRoute
    }
    '/materials/add/': {
      id: '/materials/add/'
      path: '/'
      fullPath: '/materials/add/'
      preLoaderRoute: typeof MaterialsAddIndexImport
      parentRoute: typeof MaterialsAddRouteImport
    }
  }
}

// Create and export the route tree

interface MaterialsAddRouteRouteChildren {
  MaterialsAddIndexRoute: typeof MaterialsAddIndexRoute
}

const MaterialsAddRouteRouteChildren: MaterialsAddRouteRouteChildren = {
  MaterialsAddIndexRoute: MaterialsAddIndexRoute,
}

const MaterialsAddRouteRouteWithChildren =
  MaterialsAddRouteRoute._addFileChildren(MaterialsAddRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/materials/add': typeof MaterialsAddRouteRouteWithChildren
  '/clients': typeof ClientsIndexRoute
  '/materials': typeof MaterialsIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/sales': typeof SalesIndexRoute
  '/materials/add/': typeof MaterialsAddIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/clients': typeof ClientsIndexRoute
  '/materials': typeof MaterialsIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/sales': typeof SalesIndexRoute
  '/materials/add': typeof MaterialsAddIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/materials/add': typeof MaterialsAddRouteRouteWithChildren
  '/clients/': typeof ClientsIndexRoute
  '/materials/': typeof MaterialsIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/sales/': typeof SalesIndexRoute
  '/materials/add/': typeof MaterialsAddIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/materials/add'
    | '/clients'
    | '/materials'
    | '/orders'
    | '/sales'
    | '/materials/add/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/clients' | '/materials' | '/orders' | '/sales' | '/materials/add'
  id:
    | '__root__'
    | '/'
    | '/materials/add'
    | '/clients/'
    | '/materials/'
    | '/orders/'
    | '/sales/'
    | '/materials/add/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MaterialsAddRouteRoute: typeof MaterialsAddRouteRouteWithChildren
  ClientsIndexRoute: typeof ClientsIndexRoute
  MaterialsIndexRoute: typeof MaterialsIndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
  SalesIndexRoute: typeof SalesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MaterialsAddRouteRoute: MaterialsAddRouteRouteWithChildren,
  ClientsIndexRoute: ClientsIndexRoute,
  MaterialsIndexRoute: MaterialsIndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
  SalesIndexRoute: SalesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/materials/add",
        "/clients/",
        "/materials/",
        "/orders/",
        "/sales/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/materials/add": {
      "filePath": "materials/add.route.tsx",
      "children": [
        "/materials/add/"
      ]
    },
    "/clients/": {
      "filePath": "clients/index.tsx"
    },
    "/materials/": {
      "filePath": "materials/index.tsx"
    },
    "/orders/": {
      "filePath": "orders/index.tsx"
    },
    "/sales/": {
      "filePath": "sales/index.tsx"
    },
    "/materials/add/": {
      "filePath": "materials/add.index.tsx",
      "parent": "/materials/add"
    }
  }
}
ROUTE_MANIFEST_END */
