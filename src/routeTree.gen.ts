/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SalesImport } from './routes/sales'
import { Route as OrdersImport } from './routes/orders'
import { Route as MaterialsImport } from './routes/materials'
import { Route as ClientsImport } from './routes/clients'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SalesRoute = SalesImport.update({
  id: '/sales',
  path: '/sales',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const MaterialsRoute = MaterialsImport.update({
  id: '/materials',
  path: '/materials',
  getParentRoute: () => rootRoute,
} as any)

const ClientsRoute = ClientsImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsImport
      parentRoute: typeof rootRoute
    }
    '/materials': {
      id: '/materials'
      path: '/materials'
      fullPath: '/materials'
      preLoaderRoute: typeof MaterialsImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/sales': {
      id: '/sales'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof SalesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/materials': typeof MaterialsRoute
  '/orders': typeof OrdersRoute
  '/sales': typeof SalesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/materials': typeof MaterialsRoute
  '/orders': typeof OrdersRoute
  '/sales': typeof SalesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/materials': typeof MaterialsRoute
  '/orders': typeof OrdersRoute
  '/sales': typeof SalesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/clients' | '/materials' | '/orders' | '/sales'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/clients' | '/materials' | '/orders' | '/sales'
  id: '__root__' | '/' | '/clients' | '/materials' | '/orders' | '/sales'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRoute: typeof ClientsRoute
  MaterialsRoute: typeof MaterialsRoute
  OrdersRoute: typeof OrdersRoute
  SalesRoute: typeof SalesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRoute: ClientsRoute,
  MaterialsRoute: MaterialsRoute,
  OrdersRoute: OrdersRoute,
  SalesRoute: SalesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/clients",
        "/materials",
        "/orders",
        "/sales"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/clients": {
      "filePath": "clients.tsx"
    },
    "/materials": {
      "filePath": "materials.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/sales": {
      "filePath": "sales.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
